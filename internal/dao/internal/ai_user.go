// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AiUserDao is the data access object for table ai_user.
type AiUserDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns AiUserColumns // columns contains all the column names of Table for convenient usage.
}

// AiUserColumns defines and stores column names for table ai_user.
type AiUserColumns struct {
	Id         string // ID
	UserName   string // 用户名
	Password   string // 密码
	Status     string // 状态：1=正常；2=禁用
	CreatedAt  string // 创建时间
	UpdatedAt  string // 更新时间
	Email      string // 邮箱
	Mobile     string // 手机号
	InviterId  string // 邀请者id
	Salt       string // 盐
	Code       string // 邀请码
	AiDeadline string // AI有效截止日期
	AiNum      string // ai次数
}

// aiUserColumns holds the columns for table ai_user.
var aiUserColumns = AiUserColumns{
	Id:         "id",
	UserName:   "user_name",
	Password:   "password",
	Status:     "status",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	Email:      "email",
	Mobile:     "mobile",
	InviterId:  "inviter_id",
	Salt:       "salt",
	Code:       "code",
	AiDeadline: "ai_deadline",
	AiNum:      "ai_num",
}

// NewAiUserDao creates and returns a new DAO object for table data access.
func NewAiUserDao() *AiUserDao {
	return &AiUserDao{
		group:   "default",
		table:   "ai_user",
		columns: aiUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AiUserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AiUserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AiUserDao) Columns() AiUserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AiUserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AiUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AiUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
